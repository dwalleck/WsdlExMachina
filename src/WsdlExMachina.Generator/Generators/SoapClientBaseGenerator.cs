using System.IO;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using WsdlExMachina.Parser.Models;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;
using CommunityToolkit.Diagnostics;

namespace WsdlExMachina.Generator.Generators;

/// <summary>
/// Generates the base class for SOAP clients.
/// </summary>
public class SoapClientBaseGenerator : ICodeGenerator
{
    /// <summary>
    /// Generates the base class for SOAP clients.
    /// </summary>
    /// <param name="wsdlDefinition">The WSDL definition.</param>
    /// <param name="outputNamespace">The namespace to use for the generated code.</param>
    /// <param name="outputDirectory">The directory where the files will be created.</param>
    public void Generate(WsdlDefinition wsdlDefinition, string outputNamespace, string outputDirectory)
    {
         // Validate parameters
        Guard.IsNotNull(wsdlDefinition, nameof(wsdlDefinition));
        Guard.IsNotNullOrWhiteSpace(outputNamespace, nameof(outputNamespace));
        Guard.IsNotNullOrWhiteSpace(outputDirectory, nameof(outputDirectory));

        // Create the SoapClientBase class
        var classDeclaration = ClassDeclaration("SoapClientBase")
            .AddModifiers(Token(SyntaxKind.PublicKeyword), Token(SyntaxKind.AbstractKeyword))
            .AddMembers(
                // Add fields
                FieldDeclaration(
                    VariableDeclaration(
                        IdentifierName("HttpClient")
                    )
                    .WithVariables(
                        SingletonSeparatedList(
                            VariableDeclarator(
                                Identifier("_httpClient")
                            )
                        )
                    )
                )
                .AddModifiers(Token(SyntaxKind.PrivateKeyword), Token(SyntaxKind.ReadOnlyKeyword)),
                FieldDeclaration(
                    VariableDeclaration(
                        PredefinedType(Token(SyntaxKind.StringKeyword))
                    )
                    .WithVariables(
                        SingletonSeparatedList(
                            VariableDeclarator(
                                Identifier("_endpoint")
                            )
                        )
                    )
                )
                .AddModifiers(Token(SyntaxKind.PrivateKeyword), Token(SyntaxKind.ReadOnlyKeyword)),
                // Add constructor
                ConstructorDeclaration(Identifier("SoapClientBase"))
                    .AddModifiers(Token(SyntaxKind.ProtectedKeyword))
                    .AddParameterListParameters(
                        Parameter(Identifier("endpoint"))
                            .WithType(PredefinedType(Token(SyntaxKind.StringKeyword))),
                        Parameter(Identifier("httpClient"))
                            .WithType(IdentifierName("HttpClient"))
                    )
                    .WithBody(
                        Block(
                            ExpressionStatement(
                                AssignmentExpression(
                                    SyntaxKind.SimpleAssignmentExpression,
                                    IdentifierName("_endpoint"),
                                    IdentifierName("endpoint")
                                )
                            ),
                            ExpressionStatement(
                                AssignmentExpression(
                                    SyntaxKind.SimpleAssignmentExpression,
                                    IdentifierName("_httpClient"),
                                    IdentifierName("httpClient")
                                )
                            )
                        )
                    ),
                // Add SendSoapRequestAsync method
                MethodDeclaration(
                    GenericName(Identifier("Task"))
                        .WithTypeArgumentList(
                            TypeArgumentList(
                                SingletonSeparatedList<TypeSyntax>(
                                    IdentifierName("TResponse")
                                )
                            )
                        ),
                    Identifier("SendSoapRequestAsync")
                )
                .AddTypeParameterListParameters(
                    TypeParameter(Identifier("TRequest")),
                    TypeParameter(Identifier("TResponse"))
                )
                .AddModifiers(Token(SyntaxKind.ProtectedKeyword), Token(SyntaxKind.AsyncKeyword))
                .AddParameterListParameters(
                    Parameter(Identifier("soapAction"))
                        .WithType(PredefinedType(Token(SyntaxKind.StringKeyword))),
                    Parameter(Identifier("request"))
                        .WithType(IdentifierName("TRequest")),
                    Parameter(Identifier("cancellationToken"))
                        .WithType(IdentifierName("CancellationToken"))
                        .WithDefault(
                            EqualsValueClause(
                                LiteralExpression(SyntaxKind.DefaultLiteralExpression)
                            )
                        )
                )
                .WithBody(
                    Block(
                        // Create the SOAP envelope
                        LocalDeclarationStatement(
                            VariableDeclaration(
                                IdentifierName("var")
                            )
                            .WithVariables(
                                SingletonSeparatedList(
                                    VariableDeclarator(
                                        Identifier("serializer")
                                    )
                                    .WithInitializer(
                                        EqualsValueClause(
                                            ObjectCreationExpression(
                                                IdentifierName("XmlSerializer")
                                            )
                                            .WithArgumentList(
                                                ArgumentList(
                                                    SingletonSeparatedList(
                                                        Argument(
                                                            TypeOfExpression(
                                                                IdentifierName("TRequest")
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        ),
                        LocalDeclarationStatement(
                            VariableDeclaration(
                                IdentifierName("var")
                            )
                            .WithVariables(
                                SingletonSeparatedList(
                                    VariableDeclarator(
                                        Identifier("soapEnvelope")
                                    )
                                    .WithInitializer(
                                        EqualsValueClause(
                                            ObjectCreationExpression(
                                                IdentifierName("StringWriter")
                                            )
                                            .WithArgumentList(
                                                ArgumentList()
                                            )
                                        )
                                    )
                                )
                            )
                        ),
                        ExpressionStatement(
                            InvocationExpression(
                                MemberAccessExpression(
                                    SyntaxKind.SimpleMemberAccessExpression,
                                    IdentifierName("serializer"),
                                    IdentifierName("Serialize")
                                )
                            )
                            .WithArgumentList(
                                ArgumentList(
                                    SeparatedList<ArgumentSyntax>(
                                        new SyntaxNodeOrToken[] {
                                            Argument(
                                                IdentifierName("soapEnvelope")
                                            ),
                                            Token(SyntaxKind.CommaToken),
                                            Argument(
                                                IdentifierName("request")
                                            )
                                        }
                                    )
                                )
                            )
                        ),
                        // Create the HTTP request
                        LocalDeclarationStatement(
                            VariableDeclaration(
                                IdentifierName("var")
                            )
                            .WithVariables(
                                SingletonSeparatedList(
                                    VariableDeclarator(
                                        Identifier("content")
                                    )
                                    .WithInitializer(
                                        EqualsValueClause(
                                            ObjectCreationExpression(
                                                IdentifierName("StringContent")
                                            )
                                            .WithArgumentList(
                                                ArgumentList(
                                                    SeparatedList<ArgumentSyntax>(
                                                        new SyntaxNodeOrToken[] {
                                                            Argument(
                                                                InvocationExpression(
                                                                    MemberAccessExpression(
                                                                        SyntaxKind.SimpleMemberAccessExpression,
                                                                        IdentifierName("soapEnvelope"),
                                                                        IdentifierName("ToString")
                                                                    )
                                                                )
                                                                .WithArgumentList(
                                                                    ArgumentList()
                                                                )
                                                            ),
                                                            Token(SyntaxKind.CommaToken),
                                                            Argument(
                                                                MemberAccessExpression(
                                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                                    IdentifierName("Encoding"),
                                                                    IdentifierName("UTF8")
                                                                )
                                                            ),
                                                            Token(SyntaxKind.CommaToken),
                                                            Argument(
                                                                LiteralExpression(
                                                                    SyntaxKind.StringLiteralExpression,
                                                                    Literal("text/xml")
                                                                )
                                                            )
                                                        }
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        ),
                        LocalDeclarationStatement(
                            VariableDeclaration(
                                IdentifierName("var")
                            )
                            .WithVariables(
                                SingletonSeparatedList(
                                    VariableDeclarator(
                                        Identifier("httpRequest")
                                    )
                                    .WithInitializer(
                                        EqualsValueClause(
                                            ObjectCreationExpression(
                                                IdentifierName("HttpRequestMessage")
                                            )
                                            .WithArgumentList(
                                                ArgumentList(
                                                    SeparatedList<ArgumentSyntax>(
                                                        new SyntaxNodeOrToken[] {
                                                            Argument(
                                                                MemberAccessExpression(
                                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                                    IdentifierName("HttpMethod"),
                                                                    IdentifierName("Post")
                                                                )
                                                            ),
                                                            Token(SyntaxKind.CommaToken),
                                                            Argument(
                                                                ObjectCreationExpression(
                                                                    IdentifierName("Uri")
                                                                )
                                                                .WithArgumentList(
                                                                    ArgumentList(
                                                                        SingletonSeparatedList(
                                                                            Argument(
                                                                                IdentifierName("_endpoint")
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        }
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        ),
                        ExpressionStatement(
                            AssignmentExpression(
                                SyntaxKind.SimpleAssignmentExpression,
                                MemberAccessExpression(
                                    SyntaxKind.SimpleMemberAccessExpression,
                                    IdentifierName("httpRequest"),
                                    IdentifierName("Content")
                                ),
                                IdentifierName("content")
                            )
                        ),
                        ExpressionStatement(
                            InvocationExpression(
                                MemberAccessExpression(
                                    SyntaxKind.SimpleMemberAccessExpression,
                                    MemberAccessExpression(
                                        SyntaxKind.SimpleMemberAccessExpression,
                                        IdentifierName("httpRequest"),
                                        IdentifierName("Headers")
                                    ),
                                    IdentifierName("Add")
                                )
                            )
                            .WithArgumentList(
                                ArgumentList(
                                    SeparatedList<ArgumentSyntax>(
                                        new SyntaxNodeOrToken[] {
                                            Argument(
                                                LiteralExpression(
                                                    SyntaxKind.StringLiteralExpression,
                                                    Literal("SOAPAction")
                                                )
                                            ),
                                            Token(SyntaxKind.CommaToken),
                                            Argument(
                                                IdentifierName("soapAction")
                                            )
                                        }
                                    )
                                )
                            )
                        ),
                        // Send the request and process the response
                        LocalDeclarationStatement(
                            VariableDeclaration(
                                IdentifierName("var")
                            )
                            .WithVariables(
                                SingletonSeparatedList(
                                    VariableDeclarator(
                                        Identifier("response")
                                    )
                                    .WithInitializer(
                                        EqualsValueClause(
                                            AwaitExpression(
                                                InvocationExpression(
                                                    MemberAccessExpression(
                                                        SyntaxKind.SimpleMemberAccessExpression,
                                                        IdentifierName("_httpClient"),
                                                        IdentifierName("SendAsync")
                                                    )
                                                )
                                                .WithArgumentList(
                                                    ArgumentList(
                                                        SeparatedList<ArgumentSyntax>(
                                                            new SyntaxNodeOrToken[] {
                                                                Argument(
                                                                    IdentifierName("httpRequest")
                                                                ),
                                                                Token(SyntaxKind.CommaToken),
                                                                Argument(
                                                                    IdentifierName("cancellationToken")
                                                                )
                                                            }
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        ),
                        ExpressionStatement(
                            InvocationExpression(
                                MemberAccessExpression(
                                    SyntaxKind.SimpleMemberAccessExpression,
                                    IdentifierName("response"),
                                    IdentifierName("EnsureSuccessStatusCode")
                                )
                            )
                            .WithArgumentList(
                                ArgumentList()
                            )
                        ),
                        LocalDeclarationStatement(
                            VariableDeclaration(
                                IdentifierName("var")
                            )
                            .WithVariables(
                                SingletonSeparatedList(
                                    VariableDeclarator(
                                        Identifier("responseContent")
                                    )
                                    .WithInitializer(
                                        EqualsValueClause(
                                            AwaitExpression(
                                                InvocationExpression(
                                                    MemberAccessExpression(
                                                        SyntaxKind.SimpleMemberAccessExpression,
                                                        MemberAccessExpression(
                                                            SyntaxKind.SimpleMemberAccessExpression,
                                                            IdentifierName("response"),
                                                            IdentifierName("Content")
                                                        ),
                                                        IdentifierName("ReadAsStringAsync")
                                                    )
                                                )
                                                .WithArgumentList(
                                                    ArgumentList()
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        ),
                        LocalDeclarationStatement(
                            VariableDeclaration(
                                IdentifierName("var")
                            )
                            .WithVariables(
                                SingletonSeparatedList(
                                    VariableDeclarator(
                                        Identifier("responseSerializer")
                                    )
                                    .WithInitializer(
                                        EqualsValueClause(
                                            ObjectCreationExpression(
                                                IdentifierName("XmlSerializer")
                                            )
                                            .WithArgumentList(
                                                ArgumentList(
                                                    SingletonSeparatedList(
                                                        Argument(
                                                            TypeOfExpression(
                                                                IdentifierName("TResponse")
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        ),
                        UsingStatement(
                            Block(
                                ReturnStatement(
                                    CastExpression(
                                        IdentifierName("TResponse"),
                                        InvocationExpression(
                                            MemberAccessExpression(
                                                SyntaxKind.SimpleMemberAccessExpression,
                                                IdentifierName("responseSerializer"),
                                                IdentifierName("Deserialize")
                                            )
                                        )
                                        .WithArgumentList(
                                            ArgumentList(
                                                SingletonSeparatedList(
                                                    Argument(
                                                        IdentifierName("reader")
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                        .WithDeclaration(
                            VariableDeclaration(
                                IdentifierName("var")
                            )
                            .WithVariables(
                                SingletonSeparatedList(
                                    VariableDeclarator(
                                        Identifier("reader")
                                    )
                                    .WithInitializer(
                                        EqualsValueClause(
                                            ObjectCreationExpression(
                                                IdentifierName("StringReader")
                                            )
                                            .WithArgumentList(
                                                ArgumentList(
                                                    SingletonSeparatedList(
                                                        Argument(
                                                            IdentifierName("responseContent")
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            );

        // Create the compilation unit
        var compilationUnit = CompilationUnit()
            .AddUsings(
                UsingDirective(ParseName("System")),
                UsingDirective(ParseName("System.IO")),
                UsingDirective(ParseName("System.Net.Http")),
                UsingDirective(ParseName("System.Text")),
                UsingDirective(ParseName("System.Threading")),
                UsingDirective(ParseName("System.Threading.Tasks")),
                UsingDirective(ParseName("System.Xml")),
                UsingDirective(ParseName("System.Xml.Serialization"))
            )
            .AddMembers(
                NamespaceDeclaration(ParseName($"{outputNamespace}.Client"))
                    .AddMembers(classDeclaration)
            );

        // Format the code
        var code = compilationUnit
            .NormalizeWhitespace()
            .ToFullString();

        // Write the file
        File.WriteAllText(Path.Combine(outputDirectory, "Client", "SoapClientBase.cs"), code);
    }
}
