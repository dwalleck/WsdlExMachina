using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.IO;
using WsdlExMachina.Parser.Models;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace WsdlExMachina.Generator.Generators;

/// <summary>
/// Generates extension methods for registering SOAP clients with dependency injection.
/// </summary>
public class ServiceCollectionExtensionsGenerator : ICodeGenerator
{
    /// <summary>
    /// Generates extension methods for registering SOAP clients with dependency injection.
    /// </summary>
    /// <param name="wsdlDefinition">The WSDL definition.</param>
    /// <param name="outputNamespace">The namespace to use for the generated code.</param>
    /// <param name="outputDirectory">The directory where the files will be created.</param>
    /// <summary>
    /// Generates the service collection extensions for the given WSDL definition.
        // Create the ServiceCollectionExtensions class
    /// <param name="wsdlDefinition">The WSDL definition.</param>
    /// <param name="outputNamespace">The namespace to use for the generated code.</param>
    /// <param name="outputDirectory">The directory where the files will be created.</param>
    public void Generate(WsdlDefinition wsdlDefinition, string outputNamespace, string outputDirectory)
    {
        // Create the class
        var classDeclaration = ClassDeclaration("ServiceCollectionExtensions")
            .AddModifiers(Token(SyntaxKind.PublicKeyword), Token(SyntaxKind.StaticKeyword))
            .AddMembers(
                // Add the AddSoapClient method
                MethodDeclaration(
                    IdentifierName("IServiceCollection"),
                    Identifier("AddSoapClient")
                )
                .AddModifiers(Token(SyntaxKind.PublicKeyword), Token(SyntaxKind.StaticKeyword))
                .AddTypeParameterListParameters(
                    TypeParameter(Identifier("TInterface")),
                    TypeParameter(Identifier("TClient"))
                )
                .AddParameterListParameters(
                    Parameter(Identifier("services"))
                        .WithType(IdentifierName("IServiceCollection"))
                        .WithModifiers(TokenList(Token(SyntaxKind.ThisKeyword))),
                    Parameter(Identifier("endpoint"))
                        .WithType(PredefinedType(Token(SyntaxKind.StringKeyword))),
                    Parameter(Identifier("configureClient"))
                        .WithType(
                            NullableType(
                                GenericName(Identifier("Action"))
                                    .WithTypeArgumentList(
                                        TypeArgumentList(
                                            SingletonSeparatedList<TypeSyntax>(
                                                IdentifierName("HttpClient")
                                            )
                                        )
                                    )
                            )
                        )
                        .WithDefault(
                            EqualsValueClause(
                                LiteralExpression(SyntaxKind.NullLiteralExpression)
                            )
                        ),
                    Parameter(Identifier("configureBuilder"))
                        .WithType(
                            NullableType(
                                GenericName(Identifier("Action"))
                                    .WithTypeArgumentList(
                                        TypeArgumentList(
                                            SingletonSeparatedList<TypeSyntax>(
                                                IdentifierName("IHttpClientBuilder")
                                            )
                                        )
                                    )
                            )
                        )
                        .WithDefault(
                            EqualsValueClause(
                                LiteralExpression(SyntaxKind.NullLiteralExpression)
                            )
                        )
                )
                .AddConstraintClauses(
                    TypeParameterConstraintClause(
                        IdentifierName("TClient")
                    )
                    .WithConstraints(
                        SeparatedList<TypeParameterConstraintSyntax>(
                            new SyntaxNodeOrToken[] {
                                ClassOrStructConstraint(
                                    SyntaxKind.ClassConstraint
                                ),
                                Token(SyntaxKind.CommaToken),
                                TypeConstraint(
                                    IdentifierName("TInterface")
                                )
                            }
                        )
                    ),
                    TypeParameterConstraintClause(
                        IdentifierName("TInterface")
                    )
                    .WithConstraints(
                        SingletonSeparatedList<TypeParameterConstraintSyntax>(
                            ClassOrStructConstraint(
                                SyntaxKind.ClassConstraint
                            )
                        )
                    )
                )
                .WithBody(
                    Block(
                        ExpressionStatement(
                            InvocationExpression(
                                MemberAccessExpression(
                                    SyntaxKind.SimpleMemberAccessExpression,
                                    IdentifierName("services"),
                                    IdentifierName("AddSingleton")
                                )
                            )
                            .WithArgumentList(
                                ArgumentList(
                                    SingletonSeparatedList(
                                        Argument(
                                            ObjectCreationExpression(
                                                IdentifierName("SoapClientOptions")
                                            )
                                            .WithInitializer(
                                                InitializerExpression(
                                                    SyntaxKind.ObjectInitializerExpression,
                                                    SingletonSeparatedList<ExpressionSyntax>(
                                                        AssignmentExpression(
                                                            SyntaxKind.SimpleAssignmentExpression,
                                                            IdentifierName("Endpoint"),
                                                            IdentifierName("endpoint")
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        ),
                        LocalDeclarationStatement(
                            VariableDeclaration(
                                IdentifierName("var")
                            )
                            .WithVariables(
                                SingletonSeparatedList(
                                    VariableDeclarator(
                                        Identifier("builder")
                                    )
                                    .WithInitializer(
                                        EqualsValueClause(
                                            InvocationExpression(
                                                MemberAccessExpression(
                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                    IdentifierName("services"),
                                                    GenericName(
                                                        Identifier("AddHttpClient")
                                                    )
                                                    .WithTypeArgumentList(
                                                        TypeArgumentList(
                                                            SeparatedList<TypeSyntax>(
                                                                new SyntaxNodeOrToken[] {
                                                                    IdentifierName("TInterface"),
                                                                    Token(SyntaxKind.CommaToken),
                                                                    IdentifierName("TClient")
                                                                }
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                            .WithArgumentList(
                                                ArgumentList(
                                                    SingletonSeparatedList(
                                                        Argument(
                                                            ParenthesizedLambdaExpression()
                                                                .WithParameterList(
                                                                    ParameterList(
                                                                        SeparatedList<ParameterSyntax>(
                                                                            new SyntaxNodeOrToken[] {
                                                                                Parameter(
                                                                                    Identifier("serviceProvider")
                                                                                ),
                                                                                Token(SyntaxKind.CommaToken),
                                                                                Parameter(
                                                                                    Identifier("client")
                                                                                )
                                                                            }
                                                                        )
                                                                    )
                                                                )
                                                                .WithBlock(
                                                                    Block(
                                                                        IfStatement(
                                                                            InvocationExpression(
                                                                                MemberAccessExpression(
                                                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                                                    IdentifierName("Uri"),
                                                                                    IdentifierName("TryCreate")
                                                                                )
                                                                            )
                                                                            .WithArgumentList(
                                                                                ArgumentList(
                                                                                    SeparatedList<ArgumentSyntax>(
                                                                                        new SyntaxNodeOrToken[] {
                                                                                            Argument(
                                                                                                IdentifierName("endpoint")
                                                                                            ),
                                                                                            Token(SyntaxKind.CommaToken),
                                                                                            Argument(
                                                                                                MemberAccessExpression(
                                                                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                                                                    IdentifierName("UriKind"),
                                                                                                    IdentifierName("Absolute")
                                                                                                )
                                                                                            ),
                                                                                            Token(SyntaxKind.CommaToken),
                                                                                            Argument(
                                                                                                DeclarationExpression(
                                                                                                    IdentifierName("var"),
                                                                                                    SingleVariableDesignation(
                                                                                                        Identifier("uri")
                                                                                                    )
                                                                                                )
                                                                                            )
                                                                                            .WithRefKindKeyword(
                                                                                                Token(SyntaxKind.OutKeyword)
                                                                                            )
                                                                                        }
                                                                                    )
                                                                                )
                                                                            ),
                                                                            Block(
                                                                                ExpressionStatement(
                                                                                    AssignmentExpression(
                                                                                        SyntaxKind.SimpleAssignmentExpression,
                                                                                        MemberAccessExpression(
                                                                                            SyntaxKind.SimpleMemberAccessExpression,
                                                                                            IdentifierName("client"),
                                                                                            IdentifierName("BaseAddress")
                                                                                        ),
                                                                                        IdentifierName("uri")
                                                                                    )
                                                                                )
                                                                            )
                                                                        ),
                                                                        ExpressionStatement(
                                                                            ConditionalAccessExpression(
                                                                                IdentifierName("configureClient"),
                                                                                InvocationExpression(
                                                                                    MemberBindingExpression(
                                                                                        IdentifierName("Invoke")
                                                                                    )
                                                                                )
                                                                                .WithArgumentList(
                                                                                    ArgumentList(
                                                                                        SingletonSeparatedList(
                                                                                            Argument(
                                                                                                IdentifierName("client")
                                                                                            )
                                                                                        )
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        ),
                        ExpressionStatement(
                            ConditionalAccessExpression(
                                IdentifierName("configureBuilder"),
                                InvocationExpression(
                                    MemberBindingExpression(
                                        IdentifierName("Invoke")
                                    )
                                )
                                .WithArgumentList(
                                    ArgumentList(
                                        SingletonSeparatedList(
                                            Argument(
                                                IdentifierName("builder")
                                            )
                                        )
                                    )
                                )
                            )
                        ),
                        ReturnStatement(
                            IdentifierName("services")
                        )
                    )
                ),
                // Add the AddSoapClientWithPolly method to register SOAP clients with Polly policies
                MethodDeclaration(
                    IdentifierName("IServiceCollection"),
                    Identifier("AddSoapClientWithPolly")
                )
                .AddModifiers(Token(SyntaxKind.PublicKeyword), Token(SyntaxKind.StaticKeyword))
                .AddTypeParameterListParameters(
                    TypeParameter(Identifier("TInterface")),
                    TypeParameter(Identifier("TClient"))
                )
                .AddParameterListParameters(
                    Parameter(Identifier("services"))
                        .WithType(IdentifierName("IServiceCollection"))
                        .WithModifiers(TokenList(Token(SyntaxKind.ThisKeyword))),
                    Parameter(Identifier("endpoint"))
                        .WithType(PredefinedType(Token(SyntaxKind.StringKeyword))),
                    Parameter(Identifier("configurePolly"))
                        .WithType(
                            NullableType(
                                GenericName(Identifier("Action"))
                                    .WithTypeArgumentList(
                                        TypeArgumentList(
                                            SingletonSeparatedList<TypeSyntax>(
                                                IdentifierName("PollyPolicyOptions")
                                            )
                                        )
                                    )
                            )
                        )
                        .WithDefault(
                            EqualsValueClause(
                                LiteralExpression(SyntaxKind.NullLiteralExpression)
                            )
                        ),
                    Parameter(Identifier("configureClient"))
                        .WithType(
                            NullableType(
                                GenericName(Identifier("Action"))
                                    .WithTypeArgumentList(
                                        TypeArgumentList(
                                            SingletonSeparatedList<TypeSyntax>(
                                                IdentifierName("HttpClient")
                                            )
                                        )
                                    )
                            )
                        )
                        .WithDefault(
                            EqualsValueClause(
                                LiteralExpression(SyntaxKind.NullLiteralExpression)
                            )
                        )
                )
                .AddConstraintClauses(
                    TypeParameterConstraintClause(
                        IdentifierName("TClient")
                    )
                    .WithConstraints(
                        SeparatedList<TypeParameterConstraintSyntax>(
                            new SyntaxNodeOrToken[] {
                                ClassOrStructConstraint(
                                    SyntaxKind.ClassConstraint
                                ),
                                Token(SyntaxKind.CommaToken),
                                TypeConstraint(
                                    IdentifierName("TInterface")
                                )
                            }
                        )
                    ),
                    TypeParameterConstraintClause(
                        IdentifierName("TInterface")
                    )
                    .WithConstraints(
                        SingletonSeparatedList<TypeParameterConstraintSyntax>(
                            ClassOrStructConstraint(
                                SyntaxKind.ClassConstraint
                            )
                        )
                    )
                )
                .WithBody(
                    Block(
                        LocalDeclarationStatement(
                            VariableDeclaration(
                                IdentifierName("var")
                            )
                            .WithVariables(
                                SingletonSeparatedList(
                                    VariableDeclarator(
                                        Identifier("policyOptions")
                                    )
                                    .WithInitializer(
                                        EqualsValueClause(
                                            ObjectCreationExpression(
                                                IdentifierName("PollyPolicyOptions")
                                            )
                                            .WithInitializer(
                                                InitializerExpression(
                                                    SyntaxKind.ObjectInitializerExpression,
                                                    SeparatedList<ExpressionSyntax>(
                                                        new SyntaxNodeOrToken[] {
                                                            AssignmentExpression(
                                                                SyntaxKind.SimpleAssignmentExpression,
                                                                IdentifierName("RetryCount"),
                                                                LiteralExpression(
                                                                    SyntaxKind.NumericLiteralExpression,
                                                                    Literal(3)
                                                                )
                                                            ),
                                                            Token(SyntaxKind.CommaToken),
                                                            AssignmentExpression(
                                                                SyntaxKind.SimpleAssignmentExpression,
                                                                IdentifierName("TimeoutSeconds"),
                                                                LiteralExpression(
                                                                    SyntaxKind.NumericLiteralExpression,
                                                                    Literal(30)
                                                                )
                                                            )
                                                        }
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        ),
                        ExpressionStatement(
                            ConditionalAccessExpression(
                                IdentifierName("configurePolly"),
                                InvocationExpression(
                                    MemberBindingExpression(
                                        IdentifierName("Invoke")
                                    )
                                )
                                .WithArgumentList(
                                    ArgumentList(
                                        SingletonSeparatedList(
                                            Argument(
                                                IdentifierName("policyOptions")
                                            )
                                        )
                                    )
                                )
                            )
                        ),
                        ReturnStatement(
                            InvocationExpression(
                                MemberAccessExpression(
                                    SyntaxKind.SimpleMemberAccessExpression,
                                    IdentifierName("services"),
                                    GenericName(
                                        Identifier("AddSoapClient")
                                    )
                                    .WithTypeArgumentList(
                                        TypeArgumentList(
                                            SeparatedList<TypeSyntax>(
                                                new SyntaxNodeOrToken[] {
                                                    IdentifierName("TInterface"),
                                                    Token(SyntaxKind.CommaToken),
                                                    IdentifierName("TClient")
                                                }
                                            )
                                        )
                                    )
                                )
                            )
                            .WithArgumentList(
                                ArgumentList(
                                    SeparatedList<ArgumentSyntax>(
                                        new SyntaxNodeOrToken[] {
                                            Argument(
                                                IdentifierName("endpoint")
                                            ),
                                            Token(SyntaxKind.CommaToken),
                                            Argument(
                                                IdentifierName("configureClient")
                                            ),
                                            Token(SyntaxKind.CommaToken),
                                            Argument(
                                                ParenthesizedLambdaExpression()
                                                    .WithParameterList(
                                                        ParameterList(
                                                            SingletonSeparatedList(
                                                                Parameter(
                                                                    Identifier("builder")
                                                                )
                                                            )
                                                        )
                                                    )
                                                    .WithBlock(
                                                        Block(
                                                            ExpressionStatement(
                                                                InvocationExpression(
                                                                    MemberAccessExpression(
                                                                        SyntaxKind.SimpleMemberAccessExpression,
                                                                        IdentifierName("builder"),
                                                                        IdentifierName("AddPolicyHandler")
                                                                    )
                                                                )
                                                                .WithArgumentList(
                                                                    ArgumentList(
                                                                        SingletonSeparatedList(
                                                                            Argument(
                                                                                InvocationExpression(
                                                                                    GenericName(
                                                                                        Identifier("TimeoutAsync")
                                                                                    )
                                                                                    .WithTypeArgumentList(
                                                                                        TypeArgumentList(
                                                                                            SingletonSeparatedList<TypeSyntax>(
                                                                                                IdentifierName("HttpResponseMessage")
                                                                                            )
                                                                                        )
                                                                                    )
                                                                                    .WithLeadingTrivia(
                                                                                        MemberAccessExpression(
                                                                                            SyntaxKind.SimpleMemberAccessExpression,
                                                                                            IdentifierName("Policy"),
                                                                                            IdentifierName("")
                                                                                        )
                                                                                        .GetLeadingTrivia()
                                                                                    )
                                                                                )
                                                                                .WithExpression(
                                                                                    MemberAccessExpression(
                                                                                        SyntaxKind.SimpleMemberAccessExpression,
                                                                                        IdentifierName("Policy"),
                                                                                        GenericName(
                                                                                            Identifier("TimeoutAsync")
                                                                                        )
                                                                                        .WithTypeArgumentList(
                                                                                            TypeArgumentList(
                                                                                                SingletonSeparatedList<TypeSyntax>(
                                                                                                    IdentifierName("HttpResponseMessage")
                                                                                                )
                                                                                            )
                                                                                        )
                                                                                    )
                                                                                )
                                                                                .WithArgumentList(
                                                                                    ArgumentList(
                                                                                        SingletonSeparatedList(
                                                                                            Argument(
                                                                                                InvocationExpression(
                                                                                                    MemberAccessExpression(
                                                                                                        SyntaxKind.SimpleMemberAccessExpression,
                                                                                                        IdentifierName("TimeSpan"),
                                                                                                        IdentifierName("FromSeconds")
                                                                                                    )
                                                                                                )
                                                                                                .WithArgumentList(
                                                                                                    ArgumentList(
                                                                                                        SingletonSeparatedList(
                                                                                                            Argument(
                                                                                                                MemberAccessExpression(
                                                                                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                                                                                    IdentifierName("policyOptions"),
                                                                                                                    IdentifierName("TimeoutSeconds")
                                                                                                                )
                                                                                                            )
                                                                                                        )
                                                                                                    )
                                                                                                )
                                                                                            )
                                                                                        )
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                            ),
                                                            ExpressionStatement(
                                                                InvocationExpression(
                                                                    MemberAccessExpression(
                                                                        SyntaxKind.SimpleMemberAccessExpression,
                                                                        IdentifierName("builder"),
                                                                        IdentifierName("AddTransientHttpErrorPolicy")
                                                                    )
                                                                )
                                                                .WithArgumentList(
                                                                    ArgumentList(
                                                                        SingletonSeparatedList(
                                                                            Argument(
                                                                                ParenthesizedLambdaExpression()
                                                                                    .WithParameterList(
                                                                                        ParameterList(
                                                                                            SingletonSeparatedList(
                                                                                                Parameter(
                                                                                                    Identifier("policy")
                                                                                                )
                                                                                            )
                                                                                        )
                                                                                    )
                                                                                    .WithExpressionBody(
                                                                                        InvocationExpression(
                                                                                            MemberAccessExpression(
                                                                                                SyntaxKind.SimpleMemberAccessExpression,
                                                                                                IdentifierName("policy"),
                                                                                                IdentifierName("WaitAndRetryAsync")
                                                                                            )
                                                                                        )
                                                                                        .WithArgumentList(
                                                                                            ArgumentList(
                                                                                                SeparatedList<ArgumentSyntax>(
                                                                                                    new SyntaxNodeOrToken[] {
                                                                                                        Argument(
                                                                                                            MemberAccessExpression(
                                                                                                                SyntaxKind.SimpleMemberAccessExpression,
                                                                                                                IdentifierName("policyOptions"),
                                                                                                                IdentifierName("RetryCount")
                                                                                                            )
                                                                                                        ),
                                                                                                        Token(SyntaxKind.CommaToken),
                                                                                                        Argument(
                                                                                                            ParenthesizedLambdaExpression()
                                                                                                                .WithParameterList(
                                                                                                                    ParameterList(
                                                                                                                        SingletonSeparatedList(
                                                                                                                            Parameter(
                                                                                                                                Identifier("retryAttempt")
                                                                                                                            )
                                                                                                                        )
                                                                                                                    )
                                                                                                                )
                                                                                                                .WithExpressionBody(
                                                                                                                    InvocationExpression(
                                                                                                                        MemberAccessExpression(
                                                                                                                            SyntaxKind.SimpleMemberAccessExpression,
                                                                                                                            IdentifierName("TimeSpan"),
                                                                                                                            IdentifierName("FromSeconds")
                                                                                                                        )
                                                                                                                    )
                                                                                                                    .WithArgumentList(
                                                                                                                        ArgumentList(
                                                                                                                            SingletonSeparatedList(
                                                                                                                                Argument(
                                                                                                                                    InvocationExpression(
                                                                                                                                        MemberAccessExpression(
                                                                                                                                            SyntaxKind.SimpleMemberAccessExpression,
                                                                                                                                            IdentifierName("Math"),
                                                                                                                                            IdentifierName("Pow")
                                                                                                                                        )
                                                                                                                                    )
                                                                                                                                    .WithArgumentList(
                                                                                                                                        ArgumentList(
                                                                                                                                            SeparatedList<ArgumentSyntax>(
                                                                                                                                                new SyntaxNodeOrToken[] {
                                                                                                                                                    Argument(
                                                                                                                                                        IdentifierName("retryAttempt")
                                                                                                                                                    ),
                                                                                                                                                    Token(SyntaxKind.CommaToken),
                                                                                                                                                    Argument(
                                                                                                                                                        LiteralExpression(
                                                                                                                                                            SyntaxKind.NumericLiteralExpression,
                                                                                                                                                            Literal(2)
                                                                                                                                                        )
                                                                                                                                                    )
                                                                                                                                                }
                                                                                                                                            )
                                                                                                                                        )
                                                                                                                                    )
                                                                                                                                )
                                                                                                                            )
                                                                                                                        )
                                                                                                                    )
                                                                                                                )
                                                                                                        )
                                                                                                    }
                                                                                                )
                                                                                            )
                                                                                        )
                                                                                    )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    )
                                            )
                                        }
                                    )
                                )
                            )
                        )
                    )
                ),
                // Define the PollyPolicyOptions class to configure Polly policies
                ClassDeclaration("PollyPolicyOptions")
                    .AddModifiers(Token(SyntaxKind.PublicKeyword))
                    .AddMembers(
                        PropertyDeclaration(
                            PredefinedType(Token(SyntaxKind.IntKeyword)),
                            Identifier("RetryCount")
                        )
                        .AddModifiers(Token(SyntaxKind.PublicKeyword))
                        .AddAccessorListAccessors(
                            AccessorDeclaration(SyntaxKind.GetAccessorDeclaration)
                                .WithSemicolonToken(Token(SyntaxKind.SemicolonToken)),
                            AccessorDeclaration(SyntaxKind.SetAccessorDeclaration)
                                .WithSemicolonToken(Token(SyntaxKind.SemicolonToken))
                        ),
                        PropertyDeclaration(
                            PredefinedType(Token(SyntaxKind.IntKeyword)),
                            Identifier("TimeoutSeconds")
                        )
                        .AddModifiers(Token(SyntaxKind.PublicKeyword))
                        .AddAccessorListAccessors(
                            AccessorDeclaration(SyntaxKind.GetAccessorDeclaration)
                                .WithSemicolonToken(Token(SyntaxKind.SemicolonToken)),
                            AccessorDeclaration(SyntaxKind.SetAccessorDeclaration)
                                .WithSemicolonToken(Token(SyntaxKind.SemicolonToken))
                        )
                    )
            );

        // Create the compilation unit
        var compilationUnit = CompilationUnit()
            .AddUsings(
                UsingDirective(ParseName("Microsoft.Extensions.DependencyInjection")),
                UsingDirective(ParseName("Microsoft.Extensions.Http")),
                UsingDirective(ParseName("Polly")),
                UsingDirective(ParseName("Polly.Extensions.Http")),
                UsingDirective(ParseName("System")),
                UsingDirective(ParseName("System.Net.Http"))
            )
            .AddMembers(
                NamespaceDeclaration(ParseName($"{outputNamespace}.Extensions"))
                    .AddUsings(
                        UsingDirective(ParseName($"{outputNamespace}.Client"))
                    )
                    .AddMembers(classDeclaration)
            );

        // Format the code
        var code = compilationUnit
            .NormalizeWhitespace()
            .ToFullString();

        // Ensure the directory exists
        Directory.CreateDirectory(Path.Combine(outputDirectory, "Extensions"));

        // Write the file
        File.WriteAllText(Path.Combine(outputDirectory, "Extensions", "ServiceCollectionExtensions.cs"), code);
    }
}
