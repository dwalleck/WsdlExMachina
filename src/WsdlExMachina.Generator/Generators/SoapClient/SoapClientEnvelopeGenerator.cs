using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using WsdlExMachina.Parser.Models;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace WsdlExMachina.Generator.Generators.SoapClient;

/// <summary>
/// Generates SOAP envelope creation and deserialization methods for the SoapClientBase class.
/// </summary>
public class SoapClientEnvelopeGenerator : ISoapClientComponentGenerator
{
    /// <summary>
    /// Generates SOAP envelope creation and deserialization methods for the SoapClientBase class.
    /// </summary>
    /// <param name="wsdlDefinition">The WSDL definition.</param>
    /// <returns>A collection of member declarations to add to the SoapClientBase class.</returns>
    public MemberDeclarationSyntax[] Generate(WsdlDefinition wsdlDefinition)
    {
        return new MemberDeclarationSyntax[]
        {
            // Add CreateSoapEnvelope method
            MethodDeclaration(
                PredefinedType(Token(SyntaxKind.StringKeyword)),
                Identifier("CreateSoapEnvelope")
            )
            .AddTypeParameterListParameters(
                TypeParameter(Identifier("T"))
            )
            .AddModifiers(Token(SyntaxKind.ProtectedKeyword), Token(SyntaxKind.VirtualKeyword))
            .AddParameterListParameters(
                Parameter(Identifier("request"))
                    .WithType(IdentifierName("T")),
                Parameter(Identifier("headers"))
                    .WithType(ArrayType(PredefinedType(Token(SyntaxKind.ObjectKeyword)))
                        .WithRankSpecifiers(
                            SingletonList(
                                ArrayRankSpecifier(
                                    SingletonSeparatedList<ExpressionSyntax>(
                                        OmittedArraySizeExpression()
                                    )
                                )
                            )
                        )
                    )
                    .WithDefault(
                        EqualsValueClause(
                            LiteralExpression(SyntaxKind.NullLiteralExpression)
                        )
                    )
            )
            .WithBody(
                Block(
                    // Create namespaces
                    LocalDeclarationStatement(
                        VariableDeclaration(
                            IdentifierName("var")
                        )
                        .WithVariables(
                            SingletonSeparatedList(
                                VariableDeclarator(
                                    Identifier("namespaces")
                                )
                                .WithInitializer(
                                    EqualsValueClause(
                                        ObjectCreationExpression(
                                            IdentifierName("XmlSerializerNamespaces")
                                        )
                                        .WithArgumentList(
                                            ArgumentList()
                                        )
                                    )
                                )
                            )
                        )
                    ),
                    ExpressionStatement(
                        InvocationExpression(
                            MemberAccessExpression(
                                SyntaxKind.SimpleMemberAccessExpression,
                                IdentifierName("namespaces"),
                                IdentifierName("Add")
                            )
                        )
                        .WithArgumentList(
                            ArgumentList(
                                SeparatedList<ArgumentSyntax>(
                                    new[] {
                                        Argument(
                                            LiteralExpression(
                                                SyntaxKind.StringLiteralExpression,
                                                Literal("soap")
                                            )
                                        ),
                                        Argument(
                                            LiteralExpression(
                                                SyntaxKind.StringLiteralExpression,
                                                Literal("http://schemas.xmlsoap.org/soap/envelope/")
                                            )
                                        )
                                    }
                                )
                            )
                        )
                    ),
                    // Create XML writer settings
                    LocalDeclarationStatement(
                        VariableDeclaration(
                            IdentifierName("var")
                        )
                        .WithVariables(
                            SingletonSeparatedList(
                                VariableDeclarator(
                                    Identifier("settings")
                                )
                                .WithInitializer(
                                    EqualsValueClause(
                                        ObjectCreationExpression(
                                            IdentifierName("XmlWriterSettings")
                                        )
                                        .WithArgumentList(
                                            ArgumentList()
                                        )
                                    )
                                )
                            )
                        )
                    ),
                    ExpressionStatement(
                        AssignmentExpression(
                            SyntaxKind.SimpleAssignmentExpression,
                            MemberAccessExpression(
                                SyntaxKind.SimpleMemberAccessExpression,
                                IdentifierName("settings"),
                                IdentifierName("Encoding")
                            ),
                            MemberAccessExpression(
                                SyntaxKind.SimpleMemberAccessExpression,
                                IdentifierName("Encoding"),
                                IdentifierName("UTF8")
                            )
                        )
                    ),
                    ExpressionStatement(
                        AssignmentExpression(
                            SyntaxKind.SimpleAssignmentExpression,
                            MemberAccessExpression(
                                SyntaxKind.SimpleMemberAccessExpression,
                                IdentifierName("settings"),
                                IdentifierName("OmitXmlDeclaration")
                            ),
                            LiteralExpression(
                                SyntaxKind.TrueLiteralExpression
                            )
                        )
                    ),
                    ExpressionStatement(
                        AssignmentExpression(
                            SyntaxKind.SimpleAssignmentExpression,
                            MemberAccessExpression(
                                SyntaxKind.SimpleMemberAccessExpression,
                                IdentifierName("settings"),
                                IdentifierName("Indent")
                            ),
                            LiteralExpression(
                                SyntaxKind.TrueLiteralExpression
                            )
                        )
                    ),
                    // Create SOAP envelope
                    LocalDeclarationStatement(
                        VariableDeclaration(
                            IdentifierName("var")
                        )
                        .WithVariables(
                            SingletonSeparatedList(
                                VariableDeclarator(
                                    Identifier("soapEnvelope")
                                )
                                .WithInitializer(
                                    EqualsValueClause(
                                        ObjectCreationExpression(
                                            IdentifierName("StringBuilder")
                                        )
                                        .WithArgumentList(
                                            ArgumentList()
                                        )
                                    )
                                )
                            )
                        )
                    ),
                    ExpressionStatement(
                        InvocationExpression(
                            MemberAccessExpression(
                                SyntaxKind.SimpleMemberAccessExpression,
                                IdentifierName("soapEnvelope"),
                                IdentifierName("AppendLine")
                            )
                        )
                        .WithArgumentList(
                            ArgumentList(
                                SingletonSeparatedList(
                                    Argument(
                                        LiteralExpression(
                                            SyntaxKind.StringLiteralExpression,
                                            Literal(@"<?xml version=""1.0"" encoding=""utf-8""?>")
                                        )
                                    )
                                )
                            )
                        )
                    ),
                    ExpressionStatement(
                        InvocationExpression(
                            MemberAccessExpression(
                                SyntaxKind.SimpleMemberAccessExpression,
                                IdentifierName("soapEnvelope"),
                                IdentifierName("AppendLine")
                            )
                        )
                        .WithArgumentList(
                            ArgumentList(
                                SingletonSeparatedList(
                                    Argument(
                                        LiteralExpression(
                                            SyntaxKind.StringLiteralExpression,
                                            Literal(@"<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">")
                                        )
                                    )
                                )
                            )
                        )
                    ),
                    // Add SOAP headers if provided
                    IfStatement(
                        BinaryExpression(
                            SyntaxKind.LogicalAndExpression,
                            BinaryExpression(
                                SyntaxKind.NotEqualsExpression,
                                IdentifierName("headers"),
                                LiteralExpression(SyntaxKind.NullLiteralExpression)
                            ),
                            BinaryExpression(
                                SyntaxKind.GreaterThanExpression,
                                MemberAccessExpression(
                                    SyntaxKind.SimpleMemberAccessExpression,
                                    IdentifierName("headers"),
                                    IdentifierName("Length")
                                ),
                                LiteralExpression(
                                    SyntaxKind.NumericLiteralExpression,
                                    Literal(0)
                                )
                            )
                        ),
                        Block(
                            ExpressionStatement(
                                InvocationExpression(
                                    MemberAccessExpression(
                                        SyntaxKind.SimpleMemberAccessExpression,
                                        IdentifierName("soapEnvelope"),
                                        IdentifierName("AppendLine")
                                    )
                                )
                                .WithArgumentList(
                                    ArgumentList(
                                        SingletonSeparatedList(
                                            Argument(
                                                LiteralExpression(
                                                    SyntaxKind.StringLiteralExpression,
                                                    Literal(@"  <soap:Header>")
                                                )
                                            )
                                        )
                                    )
                                )
                            ),
                            ForEachStatement(
                                IdentifierName("var"),
                                Identifier("header"),
                                IdentifierName("headers"),
                                Block(
                                    IfStatement(
                                        BinaryExpression(
                                            SyntaxKind.NotEqualsExpression,
                                            IdentifierName("header"),
                                            LiteralExpression(SyntaxKind.NullLiteralExpression)
                                        ),
                                        Block(
                                            LocalDeclarationStatement(
                                                VariableDeclaration(
                                                    IdentifierName("var")
                                                )
                                                .WithVariables(
                                                    SingletonSeparatedList(
                                                        VariableDeclarator(
                                                            Identifier("headerSerializer")
                                                        )
                                                        .WithInitializer(
                                                            EqualsValueClause(
                                                                ObjectCreationExpression(
                                                                    IdentifierName("XmlSerializer")
                                                                )
                                                                .WithArgumentList(
                                                                    ArgumentList(
                                                                        SingletonSeparatedList(
                                                                            Argument(
                                                                                InvocationExpression(
                                                                                    MemberAccessExpression(
                                                                                        SyntaxKind.SimpleMemberAccessExpression,
                                                                                        IdentifierName("header"),
                                                                                        IdentifierName("GetType")
                                                                                    )
                                                                                )
                                                                                .WithArgumentList(
                                                                                    ArgumentList()
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                            ),
                    LocalDeclarationStatement(
                        VariableDeclaration(
                            IdentifierName("var")
                        )
                        .WithVariables(
                            SingletonSeparatedList(
                                VariableDeclarator(
                                    Identifier("bodyStringWriter")
                                )
                                .WithInitializer(
                                    EqualsValueClause(
                                        ObjectCreationExpression(
                                            IdentifierName("StringWriter")
                                        )
                                        .WithArgumentList(
                                            ArgumentList()
                                        )
                                    )
                                )
                            )
                        )
                    ),
                    LocalDeclarationStatement(
                        VariableDeclaration(
                            IdentifierName("var")
                        )
                        .WithVariables(
                            SingletonSeparatedList(
                                VariableDeclarator(
                                    Identifier("bodyXmlWriter")
                                )
                                .WithInitializer(
                                    EqualsValueClause(
                                        InvocationExpression(
                                            MemberAccessExpression(
                                                SyntaxKind.SimpleMemberAccessExpression,
                                                IdentifierName("XmlWriter"),
                                                IdentifierName("Create")
                                            )
                                        )
                                        .WithArgumentList(
                                            ArgumentList(
                                                SeparatedList<ArgumentSyntax>(
                                                    new[] {
                                                        Argument(
                                                            IdentifierName("bodyStringWriter")
                                                        ),
                                                        Argument(
                                                            IdentifierName("settings")
                                                        )
                                                    }
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    ),
                                            ExpressionStatement(
                                                InvocationExpression(
                                                    MemberAccessExpression(
                                                        SyntaxKind.SimpleMemberAccessExpression,
                                                        IdentifierName("headerSerializer"),
                                                        IdentifierName("Serialize")
                                                    )
                                                )
                                                .WithArgumentList(
                                                    ArgumentList(
                                                        SeparatedList<ArgumentSyntax>(
                                                            new[] {
                                                                Argument(
                                            IdentifierName("bodyXmlWriter")
                                                                ),
                                                                Argument(
                                                                    IdentifierName("header")
                                                                ),
                                                                Argument(
                                                                    IdentifierName("namespaces")
                                                                )
                                                            }
                                                        )
                                                    )
                                                )
                                            ),
                                            ExpressionStatement(
                                                InvocationExpression(
                                                    MemberAccessExpression(
                                                        SyntaxKind.SimpleMemberAccessExpression,
                                                        IdentifierName("soapEnvelope"),
                                                        IdentifierName("AppendLine")
                                                    )
                                                )
                                                .WithArgumentList(
                                                    ArgumentList(
                                                        SingletonSeparatedList(
                                                            Argument(
                                        InvocationExpression(
                                            MemberAccessExpression(
                                                SyntaxKind.SimpleMemberAccessExpression,
                                                IdentifierName("bodyStringWriter"),
                                                IdentifierName("ToString")
                                            )
                                        )
                                                                .WithArgumentList(
                                                                    ArgumentList()
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            ),
                            ExpressionStatement(
                                InvocationExpression(
                                    MemberAccessExpression(
                                        SyntaxKind.SimpleMemberAccessExpression,
                                        IdentifierName("soapEnvelope"),
                                        IdentifierName("AppendLine")
                                    )
                                )
                                .WithArgumentList(
                                    ArgumentList(
                                        SingletonSeparatedList(
                                            Argument(
                                                LiteralExpression(
                                                    SyntaxKind.StringLiteralExpression,
                                                    Literal(@"  </soap:Header>")
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    ),
                    // Add SOAP body
                    ExpressionStatement(
                        InvocationExpression(
                            MemberAccessExpression(
                                SyntaxKind.SimpleMemberAccessExpression,
                                IdentifierName("soapEnvelope"),
                                IdentifierName("AppendLine")
                            )
                        )
                        .WithArgumentList(
                            ArgumentList(
                                SingletonSeparatedList(
                                    Argument(
                                        LiteralExpression(
                                            SyntaxKind.StringLiteralExpression,
                                            Literal(@"  <soap:Body>")
                                        )
                                    )
                                )
                            )
                        )
                    ),
                    // Serialize the request body
                    LocalDeclarationStatement(
                        VariableDeclaration(
                            IdentifierName("var")
                        )
                        .WithVariables(
                            SingletonSeparatedList(
                                VariableDeclarator(
                                    Identifier("bodySerializer")
                                )
                                .WithInitializer(
                                    EqualsValueClause(
                                        ObjectCreationExpression(
                                            IdentifierName("XmlSerializer")
                                        )
                                        .WithArgumentList(
                                            ArgumentList(
                                                SingletonSeparatedList(
                                                    Argument(
                                                        TypeOfExpression(
                                                            IdentifierName("T")
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    ),
                    LocalDeclarationStatement(
                        VariableDeclaration(
                            IdentifierName("var")
                        )
                        .WithVariables(
                            SingletonSeparatedList(
                                VariableDeclarator(
                                    Identifier("stringWriter")
                                )
                                .WithInitializer(
                                    EqualsValueClause(
                                        ObjectCreationExpression(
                                            IdentifierName("StringWriter")
                                        )
                                        .WithArgumentList(
                                            ArgumentList()
                                        )
                                    )
                                )
                            )
                        )
                    ),
                    LocalDeclarationStatement(
                        VariableDeclaration(
                            IdentifierName("var")
                        )
                        .WithVariables(
                            SingletonSeparatedList(
                                VariableDeclarator(
                                    Identifier("xmlWriter")
                                )
                                .WithInitializer(
                                    EqualsValueClause(
                                        InvocationExpression(
                                            MemberAccessExpression(
                                                SyntaxKind.SimpleMemberAccessExpression,
                                                IdentifierName("XmlWriter"),
                                                IdentifierName("Create")
                                            )
                                        )
                                        .WithArgumentList(
                                            ArgumentList(
                                                SeparatedList<ArgumentSyntax>(
                                                    new[] {
                                                        Argument(
                                                            IdentifierName("stringWriter")
                                                        ),
                                                        Argument(
                                                            IdentifierName("settings")
                                                        )
                                                    }
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    ),
                    ExpressionStatement(
                        InvocationExpression(
                            MemberAccessExpression(
                                SyntaxKind.SimpleMemberAccessExpression,
                                IdentifierName("bodySerializer"),
                                IdentifierName("Serialize")
                            )
                        )
                        .WithArgumentList(
                            ArgumentList(
                                SeparatedList<ArgumentSyntax>(
                                    new[] {
                                        Argument(
                                            IdentifierName("xmlWriter")
                                        ),
                                        Argument(
                                            IdentifierName("request")
                                        ),
                                        Argument(
                                            IdentifierName("namespaces")
                                        )
                                    }
                                )
                            )
                        )
                    ),
                    ExpressionStatement(
                        InvocationExpression(
                            MemberAccessExpression(
                                SyntaxKind.SimpleMemberAccessExpression,
                                IdentifierName("soapEnvelope"),
                                IdentifierName("AppendLine")
                            )
                        )
                        .WithArgumentList(
                            ArgumentList(
                                SingletonSeparatedList(
                                    Argument(
                                        InvocationExpression(
                                            MemberAccessExpression(
                                                SyntaxKind.SimpleMemberAccessExpression,
                                                IdentifierName("stringWriter"),
                                                IdentifierName("ToString")
                                            )
                                        )
                                        .WithArgumentList(
                                            ArgumentList()
                                        )
                                    )
                                )
                            )
                        )
                    ),
                    ExpressionStatement(
                        InvocationExpression(
                            MemberAccessExpression(
                                SyntaxKind.SimpleMemberAccessExpression,
                                IdentifierName("soapEnvelope"),
                                IdentifierName("AppendLine")
                            )
                        )
                        .WithArgumentList(
                            ArgumentList(
                                SingletonSeparatedList(
                                    Argument(
                                        LiteralExpression(
                                            SyntaxKind.StringLiteralExpression,
                                            Literal(@"  </soap:Body>")
                                        )
                                    )
                                )
                            )
                        )
                    ),
                    ExpressionStatement(
                        InvocationExpression(
                            MemberAccessExpression(
                                SyntaxKind.SimpleMemberAccessExpression,
                                IdentifierName("soapEnvelope"),
                                IdentifierName("AppendLine")
                            )
                        )
                        .WithArgumentList(
                            ArgumentList(
                                SingletonSeparatedList(
                                    Argument(
                                        LiteralExpression(
                                            SyntaxKind.StringLiteralExpression,
                                            Literal(@"</soap:Envelope>")
                                        )
                                    )
                                )
                            )
                        )
                    ),
                    ReturnStatement(
                        InvocationExpression(
                            MemberAccessExpression(
                                SyntaxKind.SimpleMemberAccessExpression,
                                IdentifierName("soapEnvelope"),
                                IdentifierName("ToString")
                            )
                        )
                        .WithArgumentList(
                            ArgumentList()
                        )
                    )
                )
            ),

            // Add DeserializeSoapResponse method
            MethodDeclaration(
                IdentifierName("T"),
                Identifier("DeserializeSoapResponse")
            )
            .AddTypeParameterListParameters(
                TypeParameter(Identifier("T"))
            )
            .AddModifiers(Token(SyntaxKind.ProtectedKeyword), Token(SyntaxKind.VirtualKeyword))
            .AddParameterListParameters(
                Parameter(Identifier("soapResponse"))
                    .WithType(PredefinedType(Token(SyntaxKind.StringKeyword)))
            )
            .WithBody(
                Block(
                    LocalDeclarationStatement(
                        VariableDeclaration(
                            IdentifierName("var")
                        )
                        .WithVariables(
                            SingletonSeparatedList(
                                VariableDeclarator(
                                    Identifier("serializer")
                                )
                                .WithInitializer(
                                    EqualsValueClause(
                                        ObjectCreationExpression(
                                            IdentifierName("XmlSerializer")
                                        )
                                        .WithArgumentList(
                                            ArgumentList(
                                                SingletonSeparatedList(
                                                    Argument(
                                                        TypeOfExpression(
                                                            IdentifierName("T")
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    ),
                    LocalDeclarationStatement(
                        VariableDeclaration(
                            IdentifierName("var")
                        )
                        .WithVariables(
                            SingletonSeparatedList(
                                VariableDeclarator(
                                    Identifier("reader")
                                )
                                .WithInitializer(
                                    EqualsValueClause(
                                        ObjectCreationExpression(
                                            IdentifierName("StringReader")
                                        )
                                        .WithArgumentList(
                                            ArgumentList(
                                                SingletonSeparatedList(
                                                    Argument(
                                                        IdentifierName("soapResponse")
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    ),
                    ReturnStatement(
                        CastExpression(
                            IdentifierName("T"),
                            InvocationExpression(
                                MemberAccessExpression(
                                    SyntaxKind.SimpleMemberAccessExpression,
                                    IdentifierName("serializer"),
                                    IdentifierName("Deserialize")
                                )
                            )
                            .WithArgumentList(
                                ArgumentList(
                                    SingletonSeparatedList(
                                        Argument(
                                            IdentifierName("reader")
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        };
    }
}
