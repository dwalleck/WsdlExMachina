using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using WsdlExMachina.Parser.Models;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace WsdlExMachina.Generator.Generators.SoapClient;

/// <summary>
/// Generates request/response handling methods for the SoapClientBase class.
/// </summary>
public class SoapClientRequestGenerator : ISoapClientComponentGenerator
{
    /// <summary>
    /// Generates request/response handling methods for the SoapClientBase class.
    /// </summary>
    /// <param name="wsdlDefinition">The WSDL definition.</param>
    /// <returns>A collection of member declarations to add to the SoapClientBase class.</returns>
    public MemberDeclarationSyntax[] Generate(WsdlDefinition wsdlDefinition)
    {
        return new MemberDeclarationSyntax[]
        {
            // Add SendSoapRequestAsync method
            MethodDeclaration(
                GenericName(Identifier("Task"))
                    .WithTypeArgumentList(
                        TypeArgumentList(
                            SingletonSeparatedList<TypeSyntax>(
                                IdentifierName("TResponse")
                            )
                        )
                    ),
                Identifier("SendSoapRequestAsync")
            )
            .AddTypeParameterListParameters(
                TypeParameter(Identifier("TRequest")),
                TypeParameter(Identifier("TResponse"))
            )
            .AddModifiers(Token(SyntaxKind.ProtectedKeyword), Token(SyntaxKind.AsyncKeyword))
            .AddParameterListParameters(
                Parameter(Identifier("soapAction"))
                    .WithType(PredefinedType(Token(SyntaxKind.StringKeyword))),
                Parameter(Identifier("request"))
                    .WithType(IdentifierName("TRequest")),
                Parameter(Identifier("header"))
                    .WithType(PredefinedType(Token(SyntaxKind.ObjectKeyword)))
                    .WithDefault(
                        EqualsValueClause(
                            LiteralExpression(SyntaxKind.NullLiteralExpression)
                        )
                    ),
                Parameter(Identifier("cancellationToken"))
                    .WithType(IdentifierName("CancellationToken"))
                    .WithDefault(
                        EqualsValueClause(
                            LiteralExpression(SyntaxKind.DefaultLiteralExpression)
                        )
                    )
            )
            .WithBody(
                Block(
                    // Convert single header to array if provided
                    LocalDeclarationStatement(
                        VariableDeclaration(
                            IdentifierName("var")
                        )
                        .WithVariables(
                            SingletonSeparatedList(
                                VariableDeclarator(
                                    Identifier("headers")
                                )
                                .WithInitializer(
                                    EqualsValueClause(
                                        ConditionalExpression(
                                            BinaryExpression(
                                                SyntaxKind.NotEqualsExpression,
                                                IdentifierName("header"),
                                                LiteralExpression(SyntaxKind.NullLiteralExpression)
                                            ),
                                            ArrayCreationExpression(
                                                ArrayType(
                                                    PredefinedType(Token(SyntaxKind.ObjectKeyword))
                                                )
                                                .WithRankSpecifiers(
                                                    SingletonList(
                                                        ArrayRankSpecifier(
                                                            SingletonSeparatedList<ExpressionSyntax>(
                                                                OmittedArraySizeExpression()
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                            .WithInitializer(
                                                InitializerExpression(
                                                    SyntaxKind.ArrayInitializerExpression,
                                                    SingletonSeparatedList<ExpressionSyntax>(
                                                        IdentifierName("header")
                                                    )
                                                )
                                            ),
                                            LiteralExpression(SyntaxKind.NullLiteralExpression)
                                        )
                                    )
                                )
                            )
                        )
                    ),
                    // Create the SOAP envelope
                    LocalDeclarationStatement(
                        VariableDeclaration(
                            IdentifierName("var")
                        )
                        .WithVariables(
                            SingletonSeparatedList(
                                VariableDeclarator(
                                    Identifier("soapEnvelope")
                                )
                                .WithInitializer(
                                    EqualsValueClause(
                                        InvocationExpression(
                                            IdentifierName("CreateSoapEnvelope")
                                        )
                                        .WithArgumentList(
                                            ArgumentList(
                                                SeparatedList<ArgumentSyntax>(
                                                    new[] {
                                                        Argument(
                                                            IdentifierName("request")
                                                        ),
                                                        Argument(
                                                            IdentifierName("headers")
                                                        )
                                                    }
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    ),
                    // Create the HTTP request
                    LocalDeclarationStatement(
                        VariableDeclaration(
                            IdentifierName("var")
                        )
                        .WithVariables(
                            SingletonSeparatedList(
                                VariableDeclarator(
                                    Identifier("content")
                                )
                                .WithInitializer(
                                    EqualsValueClause(
                                        ObjectCreationExpression(
                                            IdentifierName("StringContent")
                                        )
                                        .WithArgumentList(
                                            ArgumentList(
                                                SeparatedList<ArgumentSyntax>(
                                                    new[] {
                                                        Argument(
                                                            IdentifierName("soapEnvelope")
                                                        ),
                                                        Argument(
                                                            MemberAccessExpression(
                                                                SyntaxKind.SimpleMemberAccessExpression,
                                                                IdentifierName("Encoding"),
                                                                IdentifierName("UTF8")
                                                            )
                                                        ),
                                                        Argument(
                                                            LiteralExpression(
                                                                SyntaxKind.StringLiteralExpression,
                                                                Literal("text/xml")
                                                            )
                                                        )
                                                    }
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    ),
                    // Add SOAPAction header
                    ExpressionStatement(
                        InvocationExpression(
                            MemberAccessExpression(
                                SyntaxKind.SimpleMemberAccessExpression,
                                MemberAccessExpression(
                                    SyntaxKind.SimpleMemberAccessExpression,
                                    IdentifierName("content"),
                                    IdentifierName("Headers")
                                ),
                                IdentifierName("Add")
                            )
                        )
                        .WithArgumentList(
                            ArgumentList(
                                SeparatedList<ArgumentSyntax>(
                                    new[] {
                                        Argument(
                                            LiteralExpression(
                                                SyntaxKind.StringLiteralExpression,
                                                Literal("SOAPAction")
                                            )
                                        ),
                                        Argument(
                                            IdentifierName("soapAction")
                                        )
                                    }
                                )
                            )
                        )
                    ),
                    // Send the request and process the response
                    LocalDeclarationStatement(
                        VariableDeclaration(
                            IdentifierName("var")
                        )
                        .WithVariables(
                            SingletonSeparatedList(
                                VariableDeclarator(
                                    Identifier("response")
                                )
                                .WithInitializer(
                                    EqualsValueClause(
                                        AwaitExpression(
                                            InvocationExpression(
                                                MemberAccessExpression(
                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                    IdentifierName("_httpClient"),
                                                    IdentifierName("PostAsync")
                                                )
                                            )
                                            .WithArgumentList(
                                                ArgumentList(
                                                    SeparatedList<ArgumentSyntax>(
                                                        new[] {
                                                            Argument(
                                                                IdentifierName("_endpoint")
                                                            ),
                                                            Argument(
                                                                IdentifierName("content")
                                                            ),
                                                            Argument(
                                                                IdentifierName("cancellationToken")
                                                            )
                                                        }
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    ),
                    ExpressionStatement(
                        InvocationExpression(
                            MemberAccessExpression(
                                SyntaxKind.SimpleMemberAccessExpression,
                                IdentifierName("response"),
                                IdentifierName("EnsureSuccessStatusCode")
                            )
                        )
                        .WithArgumentList(
                            ArgumentList()
                        )
                    ),
                    LocalDeclarationStatement(
                        VariableDeclaration(
                            IdentifierName("var")
                        )
                        .WithVariables(
                            SingletonSeparatedList(
                                VariableDeclarator(
                                    Identifier("responseContent")
                                )
                                .WithInitializer(
                                    EqualsValueClause(
                                        AwaitExpression(
                                            InvocationExpression(
                                                MemberAccessExpression(
                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                    MemberAccessExpression(
                                                        SyntaxKind.SimpleMemberAccessExpression,
                                                        IdentifierName("response"),
                                                        IdentifierName("Content")
                                                    ),
                                                    IdentifierName("ReadAsStringAsync")
                                                )
                                            )
                                            .WithArgumentList(
                                                ArgumentList(
                                                    SingletonSeparatedList(
                                                        Argument(
                                                            IdentifierName("cancellationToken")
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    ),
                    ReturnStatement(
                        InvocationExpression(
                            GenericName(
                                Identifier("DeserializeSoapResponse")
                            )
                            .WithTypeArgumentList(
                                TypeArgumentList(
                                    SingletonSeparatedList<TypeSyntax>(
                                        IdentifierName("TResponse")
                                    )
                                )
                            )
                        )
                        .WithArgumentList(
                            ArgumentList(
                                SingletonSeparatedList(
                                    Argument(
                                        IdentifierName("responseContent")
                                    )
                                )
                            )
                        )
                    )
                )
            )
        };
    }
}
